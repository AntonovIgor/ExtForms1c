// (с) 27.12.2011
// Модуль полной выгрузки и загрузки объектов ИБ (справочников и документов)
// Участки кода, предназначенные для переопределения, помечены комментарием: //{*

//////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мЗагрузкаВРежимеОбмена;

Перем мТекущийРежимЗагрузки;
Перем спСписокВыгружаемыхПоСсылке, спСписокДополнительныхОбъектов, спСписокВыгруженныхОбъектов;

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ ИБ

//{*

// Функция возвращает открытую для выборки коллекцию объектов ИБ,
// предназначенных для выгрузки в XML-файл
//
// Возвращаемое значение:
//  Коллекция выгружаемых объектов, для которой доступен обход элементов коллекции методом Для Каждого ... Из ... Цикл
//
Функция ПолучитьВыборкуОбъектовИБ()
	
	Перем ВыборкаОбъектовИБ;
	
	// <модуль получения выборки>
	
	Возврат ВыборкаОбъектовИБ;
	
КонецФункции

// Вызывается после загрузки и полного заполнения объекта ИБ из XML-файла
// Параметры:
// - ОбъектИБ - СправочникОбъект, ДокументОбъект, загруженный объект ИБ
Процедура ПослеЗагрузкиОбъекта(ОбъектИБ)
	
	// <модуль обработчика>
	
КонецПроцедуры

//}*

//////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ

Процедура ВыполнитьОбмен(ИмяфайлаВыгрузки,ИмяфайлаЗагрузки) Экспорт
	
	// инициализация перед обменом
	
	мЗагрузкаВРежимеОбмена = Ложь; //{* задайте Истина, если необходимо загружать данные в режима обмена
	мТекущийРежимЗагрузки = "Данные";
	спСписокВыгружаемыхПоСсылке = Новый СписокЗначений;
	спСписокДополнительныхОбъектов = Новый СписокЗначений;
	спСписокВыгруженныхОбъектов = Новый СписокЗначений;
	
	// обмен
	
	ВыгрузитьОбъекты(ИмяфайлаВыгрузки);
	ЗагрузитьОбъекты(ИмяфайлаЗагрузки);
	
КонецПроцедуры

Процедура ВыгрузитьОбъекты(ПолноеИмяФайла)
	
	ФайлXML = СоздатьXMLФайл(ПолноеИмяФайла);
	Если ФайлXML = Неопределено Тогда
		Сообщить("Ошибка в момент создания файла выгрузки!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ВыборкаОбъектовИБ = ПолучитьВыборкуОбъектовИБ();
	
	Для Каждого ОбъектИБ Из ВыборкаОбъектовИБ Цикл
		
		ФайлXML.ЗаписатьНачалоЭлемента("Объекты");
		ДобавитьЭлементВXMLФайл(ФайлXML,"Объект",ОбъектИБ);
		ФайлXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ВыгрузитьОбъектыПоССылкам(ФайлXML);
	
	ЗаписатьXMLФайл(ФайлXML);
	
КонецПроцедуры

Процедура ЗагрузитьОбъекты(ПолноеИмяФайла)
	
	ФайлXML = ОткрытьXMLФайлНаЧтение(ПолноеИмяФайла);
	Если ФайлXML = Неопределено Тогда
		Сообщить("Ошибка при открытии файла загрузки!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ЧтениеОсновногоБлока = Ложь;
	СчетчикЗаписей = 0;
	
	Пока ФайлXML.Прочитать() Цикл
		
		// Чтение "шапки" файла
		Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = "ДанныеВыгрузки" Тогда
			Прервать; // Конец файла выгрузки
		КонецЕсли;
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "ДанныеВыгрузки" Тогда
			ЧтениеОсновногоБлока = Истина;
		КонецЕсли;
		
		Если НЕ ЧтениеОсновногоБлока Тогда
			Продолжить;
		КонецЕсли;
		
		// Чтение данных
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И
			(ФайлXML.Имя = "Документы" ИЛИ Найти(ФайлXML.Имя,"ОбъектыПоСсылкам")) Тогда
			ПрочитатьОчереднуюЗаписьДанных(ФайлXML,ФайлXML.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	ФайлXML.Закрыть();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА В XML ОБЪЕКТОВ ПО ССЫЛКЕ

Процедура ДобавитьВСписокВыгружаемых(ЗначениеЭлемента)
	
	Если мТекущийРежимЗагрузки <> "Данные" Тогда
		Возврат;
	КонецЕсли;
	
	Если спСписокВыгружаемыхПоСсылке.НайтиПоЗначению(ЗначениеЭлемента) = Неопределено Тогда
		спСписокВыгружаемыхПоСсылке.Добавить(ЗначениеЭлемента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьВыгрузкиДополнительногоОбъекта(ЗначениеЭлемента)
	
	//{* здесь можно отфильтровать данные, выгружаемые по ссылке
	//Если НЕ ОбъектРазрешенДляВыгрузки(ЗначениеЭлемента) Тогда
	//	Возврат;
	//КонецЕсли;
	//}*
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеЭлемента)) ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеЭлемента)) Тогда
		
		Если спСписокВыгружаемыхПоСсылке.НайтиПоЗначению(ЗначениеЭлемента) = Неопределено // еще не был объявлен для выгрузки
			И спСписокДополнительныхОбъектов.НайтиПоЗначению(ЗначениеЭлемента) = Неопределено
			И спСписокВыгруженныхОбъектов.НайтиПоЗначению(ЗначениеЭлемента) = Неопределено Тогда // еще не выгружался
			спСписокДополнительныхОбъектов.Добавить(ЗначениеЭлемента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьОбъектыПоССылкам(ФайлXML)
	
	мТекущийРежимЗагрузки = "ОбъектыПоСсылкам";
	
	Для Каждого ЭлементСписка Из спСписокВыгружаемыхПоСсылке Цикл
		ФайлXML.ЗаписатьНачалоЭлемента("ОбъектыПоСсылкам");
		ДобавитьЭлементВXMLФайл(ФайлXML,"ОбъектСсылка",ЭлементСписка.Значение,Истина,Истина);
		ФайлXML.ЗаписатьКонецЭлемента(); // ОбъектыПоСсылкам
		спСписокВыгруженныхОбъектов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	Пока спСписокДополнительныхОбъектов.Количество() > 0 Цикл // рекурсивная выгрузка объектов по ссылке
		
		спСписокВыгружаемыхПоСсылке.Очистить();
		спСписокВыгружаемыхПоСсылке.ЗагрузитьЗначения(спСписокДополнительныхОбъектов.ВыгрузитьЗначения());
		спСписокДополнительныхОбъектов.Очистить();
		
		Для Каждого ЭлементСписка Из спСписокВыгружаемыхПоСсылке Цикл
			ФайлXML.ЗаписатьНачалоЭлемента("ОбъектыПоСсылкам");
			ДобавитьЭлементВXMLФайл(ФайлXML,"ОбъектСсылка",ЭлементСписка.Значение,Истина,Истина);
			ФайлXML.ЗаписатьКонецЭлемента(); // ОбъектыПоСсылкам
			спСписокВыгруженныхОбъектов.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	спСписокВыгружаемыхПоСсылке.Очистить();
	спСписокДополнительныхОбъектов.Очистить();
	спСписокВыгруженныхОбъектов.Очистить();
	
	мТекущийРежимЗагрузки = "Данные";
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА В XML

Функция СоздатьXMLФайл(ИмяФайла)
	
	ФайлXML = Новый Файл(ИмяФайла);
	
	Если (ФайлXML.Существует()) Тогда
		УдалитьФайлы(ФайлXML.ПолноеИмя);
	Иначе
		СоздатьКаталог(ФайлXML.Путь);
	КонецЕсли;
	
	ФайлXML = Новый ЗаписьXML;
	
	Попытка
		ФайлXML.ОткрытьФайл(ИмяФайла);
		ФайлXML.ЗаписатьОбъявлениеXML();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ФайлXML.ЗаписатьНачалоЭлемента("ДанныеВыгрузки");
	
	Возврат ФайлXML;
	
КонецФункции

Процедура ЗаписатьXMLФайл(ФайлXML)
	
	ФайлXML.ЗаписатьКонецЭлемента();
	ФайлXML.Закрыть();
	
КонецПроцедуры

// Выгрузает в XML описание всех непустых реквизитов и состав табличных частей
// Вызывается для справочников и документов из процедуры ДобавитьОписаниеМетаданных()
// Параметры:
// - ФайлXML - ЗаписьXML, открытый и инициированный файл
// - МетаданныеОбъекта - метаданные, метаданные выгружаемого объекта
// - ЗначениеЭлемента - СправочникОбъект, ДокументОбъект, выгружаемый объект, для которого выгружаются реквизиты и табличные части
Процедура ВыгрузитьРеквизитыОбъекта(ФайлXML,МетаданныеОбъекта,ЗначениеЭлемента)
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если НЕ ЗначениеЗаполнено(ЗначениеЭлемента[Реквизит.Имя]) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьЭлементВXMLФайл(ФайлXML,"Реквизит_"+Реквизит.Имя,ЗначениеЭлемента[Реквизит.Имя],Ложь);
		ПроверитьНеобходимостьВыгрузкиДополнительногоОбъекта(ЗначениеЭлемента[Реквизит.Имя]);
	КонецЦикла;
	
	Для Каждого метТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Если ЗначениеЭлемента[метТЧ.Имя].Количество() > 0 Тогда
			
			ФайлXML.ЗаписатьНачалоЭлемента("ТЧ_"+метТЧ.Имя);
			Для Каждого СтрокаТЧ Из ЗначениеЭлемента[метТЧ.Имя] Цикл
				ФайлXML.ЗаписатьНачалоЭлемента("СтрокаТЧ");
				
				Для Каждого РеквизитТЧ Из метТЧ.Реквизиты Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ[РеквизитТЧ.Имя]) Тогда
						Продолжить;
					КонецЕсли;
					ДобавитьЭлементВXMLФайл(ФайлXML,"РеквТЧ_"+РеквизитТЧ.Имя,СтрокаТЧ[РеквизитТЧ.Имя],Ложь);
					ПроверитьНеобходимостьВыгрузкиДополнительногоОбъекта(СтрокаТЧ[РеквизитТЧ.Имя]);
				КонецЦикла;
				
				ФайлXML.ЗаписатьКонецЭлемента(); // строка табличной части
			КонецЦикла;
			ФайлXML.ЗаписатьКонецЭлемента(); // табличная часть
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выгрузка в XML произвольного элемента
// Параметры:
// - ФайлXML - ЗаписьXML, открытый и инициированный файл
// - ИмяЭлемента - строка, заголовок узла XML
// - ЗначениеЭлемента - произвольный, выгружаемое значение, для которого доступна запись в XML
// - ДобавлятьОписаниеМетаданных - булево, добавлять записи, определяющие ЗначениеЭлемента как объект метаданных
// - ВыгружатьРеквизиты - булево, выгружать значения всех реквизитов и табличных частей объекта, переданного в ЗначениеЭлемента
Процедура ДобавитьЭлементВXMLФайл(ФайлXML,ИмяЭлемента,ЗначениеЭлемента,ДобавлятьОписаниеМетаданных=Истина,ВыгружатьРеквизиты=Ложь)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияXML = XMLТипЗнч(ЗначениеЭлемента);
	Попытка
		URIПространстваИмен = ТипЗначенияXML.URIПространстваИмен;
		ИмяТипа = ТипЗначенияXML.ИмяТипа;
	Исключение
		Возврат;
	КонецПопытки;
	
	ФайлXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	
	ФайлXML.ЗаписатьАтрибут("Тип",URIПространстваИмен,ИмяТипа);
	ФайлXML.ЗаписатьАтрибут("Значение",XMLСтрока(ЗначениеЭлемента));
	
	Если ДобавлятьОписаниеМетаданных Тогда
		ДобавитьОписаниеМетаданных(ФайлXML,ЗначениеЭлемента,ВыгружатьРеквизиты);
	КонецЕсли;
	
	ФайлXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Добавляет в XML запись, определяющюу выгружаемый элемент как объект метаданных
// Реализована для следующих типов объектов:
//  Справочник, Документ, Перечисление
// Параметры:
// - ФайлXML - ЗаписьXML, открытый и инициированный файл
// - ЗначениеЭлемента - СправочникСсылка, СправочникОбеъкт, ДокументСсылка, ДокументОбъект, ПеречислениеСсылка, выгружаемый объект ИБ
// - ВыгружатьРеквизиты - булево, выгружать значения всех реквизитов и табличных частей объекта
Процедура ДобавитьОписаниеМетаданных(ФайлXML,ЗначениеЭлемента,ВыгружатьРеквизиты)
	
	Перем МетаданныеОбъекта;
	
	пВыгружатьРеквизиты = ВыгружатьРеквизиты;
	
	Попытка
		МетаданныеОбъекта = ЗначениеЭлемента.Метаданные();
	Исключение
		Возврат;
	КонецПопытки;
	
	ФайлXML.ЗаписатьНачалоЭлемента("ОписаниеМетаданных");
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда // Элемент или группа справочника
		
		ДобавитьВСписокВыгружаемых(ЗначениеЭлемента);
		
		ФайлXML.ЗаписатьАтрибут("ТипМетаданных","Справочник");
		ФайлXML.ЗаписатьАтрибут("Вид",МетаданныеОбъекта.Имя);
		
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			ФайлXML.ЗаписатьАтрибут("Код",СокрЛП(ЗначениеЭлемента.Код));
			Если ЗначениеЗаполнено(ЗначениеЭлемента.Родитель) Тогда
				ФайлXML.ЗаписатьАтрибут("КодРодителя",СокрЛП(ЗначениеЭлемента.Родитель.Код));
			КонецЕсли;
		КонецЕсли;
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			ФайлXML.ЗаписатьАтрибут("Наименование",СокрЛП(ЗначениеЭлемента.Наименование));
			Если ЗначениеЗаполнено(ЗначениеЭлемента.Родитель) Тогда
				ФайлXML.ЗаписатьАтрибут("НаименованиеРодителя",СокрЛП(ЗначениеЭлемента.Родитель.Наименование));
			КонецЕсли;
		КонецЕсли;
		Если МетаданныеОбъекта.Иерархический Тогда
			ФайлXML.ЗаписатьАтрибут("Группа",?(ЗначениеЭлемента.ЭтоГруппа,"1","0"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеЭлемента.Владелец) Тогда
			ФайлXML.ЗаписатьАтрибут("КодВладельца",СокрЛП(ЗначениеЭлемента.Владелец.Код));
			ФайлXML.ЗаписатьАтрибут("НаименованиеВладельца",СокрЛП(ЗначениеЭлемента.Владелец.Наименование));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеЭлемента.Родитель) Тогда
			ДобавитьВСписокВыгружаемых(ЗначениеЭлемента.Родитель);
			ДобавитьЭлементВXMLФайл(ФайлXML,"IDРодителя",ЗначениеЭлемента.Родитель.УникальныйИдентификатор(),Ложь);
		КонецЕсли;
		ДобавитьЭлементВXMLФайл(ФайлXML,"ID",ЗначениеЭлемента.УникальныйИдентификатор(),Ложь);
		ДобавитьЭлементВXMLФайл(ФайлXML,"ПометкаУдаления",ЗначениеЭлемента.ПометкаУдаления,Ложь);
		
		Если ЗначениеЗаполнено(ЗначениеЭлемента.Владелец) Тогда
			ДобавитьВСписокВыгружаемых(ЗначениеЭлемента.Владелец);
			ДобавитьЭлементВXMLФайл(ФайлXML,"Владелец",ЗначениеЭлемента.Владелец,Ложь);
		КонецЕсли;
		
		Если пВыгружатьРеквизиты И мТекущийРежимЗагрузки = "ОбъектыПоСсылкам" Тогда
			ВыгрузитьРеквизитыОбъекта(ФайлXML,МетаданныеОбъекта,ЗначениеЭлемента);
		КонецЕсли;
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда // Документ
		
		ДобавитьВСписокВыгружаемых(ЗначениеЭлемента);
		
		ФайлXML.ЗаписатьАтрибут("ТипМетаданных","Документ");
		ФайлXML.ЗаписатьАтрибут("Вид",МетаданныеОбъекта.Имя);
		
		Если МетаданныеОбъекта.ДлинаНомера > 0 Тогда
			ФайлXML.ЗаписатьАтрибут("Номер",СокрЛП(ЗначениеЭлемента.Номер));
		КонецЕсли;
		
		ДобавитьЭлементВXMLФайл(ФайлXML,"Дата",ЗначениеЭлемента.Дата,Ложь);
		ДобавитьЭлементВXMLФайл(ФайлXML,"ID",ЗначениеЭлемента.УникальныйИдентификатор(),Ложь);
		ДобавитьЭлементВXMLФайл(ФайлXML,"ПометкаУдаления",ЗначениеЭлемента.ПометкаУдаления,Ложь);
		ДобавитьЭлементВXMLФайл(ФайлXML,"Проведен",ЗначениеЭлемента.Проведен,Ложь);
		
		Если пВыгружатьРеквизиты И мТекущийРежимЗагрузки = "ОбъектыПоСсылкам" Тогда
			ВыгрузитьРеквизитыОбъекта(ФайлXML,МетаданныеОбъекта,ЗначениеЭлемента);
		КонецЕсли;
		
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда // Значение перечисления
		
		ФайлXML.ЗаписатьАтрибут("ТипМетаданных","Перечисление");
		ФайлXML.ЗаписатьАтрибут("Вид",МетаданныеОбъекта.Имя);
		
	Иначе
		
		Сообщить("Неизвестный вид метаданных"+МетаданныеОбъекта.ПолноеИмя(),СтатусСообщения.ОченьВажное);
		
	КонецЕсли;
	
	ФайлXML.ЗаписатьКонецЭлемента(); // ОписаниеМетаданных
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА ИЗ XML

Функция ОткрытьXMLФайлНаЧтение(ПолноеИмяФайла)
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если НЕ Файл.Существует() ИЛИ Файл.ЭтоКаталог() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлXML = Новый ЧтениеXML;
	Попытка
		ФайлXML.ОткрытьФайл(ПолноеИмяФайла);
	Исключение
		Сообщить("Не удалось открыть файл загрузки: "+ОписаниеОшибки(),СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ФайлXML;
	
КонецФункции

Функция ЗаполнитьРеквизитыОбъекта(ОбъектСправочника,СтруктураПолей,СтруктураТабличныхЧастей)
	
	ОбъектСправочника.ОбменДанными.Загрузка = мЗагрузкаВРежимеОбмена;
	МетаданныеОбъекта = ОбъектСправочника.Метаданные();
	
	ЭтоСправочник = (Метаданные.Справочники.Найти(МетаданныеОбъекта.Имя) <> Неопределено);
	ЭтоДокумент = (Метаданные.Документы.Найти(МетаданныеОбъекта.Имя) <> Неопределено);
	
	// заполнение реквизитов объекта
	Для Каждого ОписаниеПоля Из СтруктураПолей Цикл
		
		Если Найти(ОписаниеПоля.Ключ,"Реквизит_") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = СтрЗаменить(ОписаниеПоля.Ключ,"Реквизит_","");
		
		МожноИспользоватьДляОбъекта = Истина;
		Если НЕ ПустаяСтрока(ИмяРеквизита) И (МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено) Тогда
			Если ЭтоСправочник Тогда
				Если (МетаданныеОбъекта.Реквизиты[ИмяРеквизита].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
					И НЕ ОбъектСправочника.ЭтоГруппа)
					ИЛИ (МетаданныеОбъекта.Реквизиты[ИмяРеквизита].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента
					И ОбъектСправочника.ЭтоГруппа) Тогда
					МожноИспользоватьДляОбъекта = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			МожноИспользоватьДляОбъекта = Ложь;
		КонецЕсли;
		
		Если МожноИспользоватьДляОбъекта Тогда
			Попытка
				ОбъектСправочника[ИмяРеквизита] = ОписаниеПоля.Значение;
			Исключение
				//{* Обработка ошибки: не удалось заполнить реквизит
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// заполнение табличных частей объекта
	Для Каждого ОписаниеПоля Из СтруктураТабличныхЧастей Цикл
		
		ИмяТЧ = ОписаниеПоля.Ключ;
		ТабЧасть = ОписаниеПоля.Значение;
		
		МожноИспользоватьДляОбъекта = Истина;
		Если НЕ ПустаяСтрока(ИмяТЧ) И (МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТЧ) <> Неопределено) Тогда
			Если ЭтоСправочник Тогда
				Если (МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
					И НЕ ОбъектСправочника.ЭтоГруппа)
					ИЛИ (МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента
					И ОбъектСправочника.ЭтоГруппа) Тогда
					МожноИспользоватьДляОбъекта = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			МожноИспользоватьДляОбъекта = Ложь;
		КонецЕсли;
		
		Если МожноИспользоватьДляОбъекта Тогда
			Попытка
				ОбъектСправочника[ИмяТЧ].Очистить();
				Для Каждого СтрокаТабличнойЧасти Из ТабЧасть Цикл
					ЗаполнитьЗначенияСвойств(ОбъектСправочника[ИмяТЧ].Добавить(),СтрокаТабличнойЧасти);
				КонецЦикла;
			Исключение
				//{* Обработка ошибки: не удалось заполнить табличную часть
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	ПослеЗагрузкиОбъекта(ОбъектСправочника);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСоздатьОбъектБазыДанных(Тип,Вид,КодНомер,ИмяДата,ID,СтруктураПолей,СтруктураТабличныхЧастей,ЭтоГруппа=Ложь,Владелец=Неопределено,ГруппаРодитель=Неопределено)
	
	Перем НовыйЭлемент;
	Перем НовыйДокумент;
	
	Если Тип = "Справочник" Тогда
		
		Попытка
			СсылкаНаЭлемент = Справочники[Вид].ПолучитьСсылку(ID); // ссылка найденного, либо полученная по UUID, для которой нужно создать элемент в ИБ
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		ПолученныйОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
		Если ПолученныйОбъект = Неопределено Тогда
			Если ЭтоГруппа Тогда
				Если Метаданные.Справочники[Вид].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
					НовыйЭлемент = Справочники[Вид].СоздатьЭлемент();
				Иначе
					НовыйЭлемент = Справочники[Вид].СоздатьГруппу();
				КонецЕсли;
			Иначе
				НовыйЭлемент = Справочники[Вид].СоздатьЭлемент();
			КонецЕсли;
		Иначе
			Если Метаданные.Справочники[Вид].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов И ЭтоГруппа <> СсылкаНаЭлемент.ЭтоГруппа Тогда
				Возврат Неопределено;
			Иначе
				УстановитьПометкиУдаленияПроведения(Тип,Вид,ИмяДата,КодНомер,ПолученныйОбъект,СтруктураПолей);
				Возврат СсылкаНаЭлемент; // объект существует в базе и удовлетворяет UUID
			КонецЕсли;
		КонецЕсли;
		
		// создание нового элемента или группы
		Если Метаданные.Справочники[Вид].ДлинаКода > 0 И ЗначениеЗаполнено(КодНомер) Тогда
			НовыйЭлемент.Код = КодНомер;
		КонецЕсли;
		Если Метаданные.Справочники[Вид].ДлинаНаименования > 0 И ЗначениеЗаполнено(ИмяДата) Тогда
			НовыйЭлемент.Наименование = ИмяДата;
		КонецЕсли;
		Если Метаданные.Справочники[Вид].Иерархический И ЗначениеЗаполнено(ГруппаРодитель) Тогда
			Если Метаданные.Справочники[Вид].ОграничиватьКоличествоУровней И ГруппаРодитель.Уровень() = Метаданные.Справочники[Вид].КоличествоУровней Тогда
				//{* Обработка ошибки: превышение уровня иерархии справочника
			Иначе
				НовыйЭлемент.Родитель = ГруппаРодитель;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Владелец) Тогда
			НовыйЭлемент.Владелец = Владелец;
		КонецЕсли;
		НовыйЭлемент.УстановитьСсылкуНового(СсылкаНаЭлемент);
		ЗаполнитьРеквизитыОбъекта(НовыйЭлемент,СтруктураПолей,СтруктураТабличныхЧастей);
		
		УстановитьПометкиУдаленияПроведения(Тип,Вид,ИмяДата,КодНомер,НовыйЭлемент,СтруктураПолей);
		
		Возврат СсылкаНаЭлемент;
		
	ИначеЕсли Тип = "Документ" Тогда
		
		Попытка
			СсылкаНаДокумент = Документы[Вид].ПолучитьСсылку(ID); // ссылка найденного, либо полученная по UUID, для которой нужно создать документ в ИБ
		Исключение
			//{* Обработка ошибки: не удалось получить ссылку на документ
			Возврат Неопределено;
		КонецПопытки;
		
		ПолученныйОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		Если ПолученныйОбъект = Неопределено Тогда
			НовыйДокумент = Документы[Вид].СоздатьДокумент();
		Иначе
			УстановитьПометкиУдаленияПроведения(Тип,Вид,ИмяДата,КодНомер,ПолученныйОбъект,СтруктураПолей);
			Возврат СсылкаНаДокумент; // объект существует в базе и удовлетворяет UUID
		КонецЕсли;
		
		// создание нового документа
		Если Метаданные.Документы[Вид].ДлинаНомера > 0 И ЗначениеЗаполнено(КодНомер) Тогда
			НовыйДокумент.Номер = КодНомер;
		КонецЕсли;
		НовыйДокумент.Дата = ИмяДата;
		НовыйДокумент.УстановитьСсылкуНового(СсылкаНаДокумент);
		
		ЗаполнитьРеквизитыОбъекта(НовыйДокумент,СтруктураПолей,СтруктураТабличныхЧастей);
		УстановитьПометкиУдаленияПроведения(Тип,Вид,ИмяДата,КодНомер,НовыйДокумент,СтруктураПолей);
		
		Возврат СсылкаНаДокумент;
		
	КонецЕсли;
	
КонецФункции

Функция УстановитьПометкиУдаленияПроведения(Тип,Вид,ИмяДата,КодНомер,ОбъектИБ,СтруктураПолей)
	
	Если Тип = "Справочник" Тогда
		
		Попытка
			ОбъектИБ.Записать();
			ПометкаУдаления = Ложь;
			Если СтруктураПолей.Свойство("ПометкаУдаления",ПометкаУдаления) И ОбъектИБ.ПометкаУдаления <> ПометкаУдаления Тогда
				ОбъектИБ.УстановитьПометкуУдаления(ПометкаУдаления,Ложь);
			КонецЕсли;
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	ИначеЕсли Тип = "Документ" Тогда
		
		Попытка
			ОбъектИБ.Записать();
			ПометкаУдаления = Ложь;
			Проведен = Ложь;
			Если СтруктураПолей.Свойство("ПометкаУдаления",ПометкаУдаления) И ОбъектИБ.ПометкаУдаления <> ПометкаУдаления Тогда
				ОбъектИБ.УстановитьПометкуУдаления(ПометкаУдаления);
			КонецЕсли;
			Если СтруктураПолей.Свойство("Проведен",Проведен) Тогда
				Если Проведен Тогда
					ОбъектИБ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					Если ОбъектИБ.Проведен Тогда
						ОбъектИБ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПрочитатьТабличнуюЧастьИзXML(ФайлXML,СтруктураТабличныхЧастей)
	
	ИмяУзла = ФайлXML.Имя;
	ИмяТЧ = Сред(ИмяУзла,4);
	
	ТабЧасть = Новый ТаблицаЗначений;
	
	Пока ФайлXML.Прочитать() Цикл
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = ИмяУзла Тогда // конец табличной части
			Прервать;
		КонецЕсли;
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "СтрокаТЧ" Тогда
			
			// читаем реквизиты очередной строки ТЧ
			СтрокаТабличнойЧасти = Новый Структура;
			
			Пока ФайлXML.Прочитать() Цикл
				Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = "СтрокаТЧ" Тогда
					Прервать;
				КонецЕсли;
				Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ЗначениеАтрибутаУзла = ПрочитатьЭлементИзXMLФайла(ФайлXML);
					Если Лев(ФайлXML.Имя,7) = "РеквТЧ_" Тогда
						СтрокаТабличнойЧасти.Вставить(Сред(ФайлXML.Имя,8),ЗначениеАтрибутаУзла);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// строка полностью прочитана - добавляем в ТЗ, предварительно проверив структуру колонок
			Для Каждого ПолеСтруктуры Из СтрокаТабличнойЧасти Цикл
				Если ТабЧасть.Колонки.Найти(ПолеСтруктуры.Ключ) = Неопределено Тогда
					ТабЧасть.Колонки.Добавить(ПолеСтруктуры.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(ТабЧасть.Добавить(),СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураТабличныхЧастей.Вставить(ИмяТЧ,ТабЧасть);
	
Конецпроцедуры

// Считывает из XML полную структуру объекта и формирует объект ИБ
// Возвращает: ссылка на созданный или прочитанный объект ИБ
// Параметры:
// - ФайлXML - ЧтениеXML, открытый на чтение файл XML, спозиционированный на узле "ОписаниеМетаданных"
// - ПрочитанныйЭлемент - произвольный, прочитанный из узла верхнего уровня элемент, для которого читаем состав метаданных
Функция ПолучитьСоздатьОбъектИнформационнойБазыИзXML(ФайлXML,ПрочитанныйЭлемент)
	
	ОбъектИБ = Неопределено;
	СтруктураПолей = Новый Структура;
	СтруктураТабличныхЧастей = Новый Структура;
	
	// Заполнение структуры полей (!!!рекурсия с функцией ПрочитатьЭлементИзXMLФайла!!!)
	
	// простые поля метаданных
	Пока ФайлXML.ПрочитатьАтрибут() Цикл
		СтруктураПолей.Вставить(ФайлXML.ЛокальноеИмя,ФайлXML.Значение);
	КонецЦикла;
	
	// типизированные поля метаданных, табличные части и поиск конца узла
	Пока ФайлXML.Прочитать() Цикл
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = "ОписаниеМетаданных" Тогда
			Прервать;
		КонецЕсли;
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И Лев(ФайлXML.Имя,3) = "ТЧ_" Тогда
			ПрочитатьТабличнуюЧастьИзXML(ФайлXML,СтруктураТабличныхЧастей);
		КонецЕсли;
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗначениеАтрибутаУзла = ПрочитатьЭлементИзXMLФайла(ФайлXML);
			СтруктураПолей.Вставить(ФайлXML.Имя,ЗначениеАтрибутаУзла);
		КонецЕсли;
		
	КонецЦикла;
	
	// Попытка получить объект на основе прочитанных полей
	
	Если НЕ СтруктураПолей.Свойство("ТипМетаданных") Тогда // не является ссылочным объектом ИБ - возвращаем как есть, уже всё готово
		Возврат ОбъектИБ;
	КонецЕсли;
	
	Если СтруктураПолей.ТипМетаданных = "Справочник" Тогда
		// Доступные поля: Вид,Код,КодРодителя,Наименование,НаименованиеРодителя,Группа,IDРодителя,ID,Владелец,КодВладельца,НаименованиеВладельца
		
		Попытка
			ПолученныйОбъект = ПрочитанныйЭлемент.ПолучитьОбъект();
			Если ПолученныйОбъект <> Неопределено Тогда
				УстановитьПометкиУдаленияПроведения("Справочник","","","",ПолученныйОбъект,СтруктураПолей);
				Возврат ПрочитанныйЭлемент;
			КонецЕсли;
		Исключение
			Возврат NULL;
		КонецПопытки;
		
		Если НЕ СтруктураПолей.Свойство("Вид") Тогда
			Возврат ОбъектИБ;
		КонецЕсли;
		Вид = СтруктураПолей.Вид;
		
		ГруппаСправочника = Неопределено;
		Если СтруктураПолей.Свойство("IDРодителя") Тогда
			Код = "";
			Если СтруктураПолей.Свойство("КодРодителя") Тогда
				Код = СтруктураПолей.КодРодителя;
			КонецЕсли;
			Наименование = "";
			Если СтруктураПолей.Свойство("НаименованиеРодителя") Тогда
				Наименование = СтруктураПолей.НаименованиеРодителя;
			КонецЕсли;
			ID = СтруктураПолей.IDРодителя;
			Владелец = Неопределено;
			Если СтруктураПолей.Свойство("Владелец") Тогда
				Владелец = СтруктураПолей.Владелец;
			КонецЕсли;
			ГруппаСправочника = ПолучитьСоздатьОбъектБазыДанных("Справочник",Вид,Код,Наименование,ID,СтруктураПолей,СтруктураТабличныхЧастей,Истина,Владелец);
		КонецЕсли;
		
		Если СтруктураПолей.Свойство("ID") Тогда
			Код = "";
			Если СтруктураПолей.Свойство("Код") Тогда
				Код = СтруктураПолей.Код;
			КонецЕсли;
			Наименование = "";
			Если СтруктураПолей.Свойство("Наименование") Тогда
				Наименование = СтруктураПолей.Наименование;
			КонецЕсли;
			ID = СтруктураПолей.ID;
			ЭтоГруппа = Ложь;
			Если СтруктураПолей.Свойство("Группа") Тогда
				ЭтоГруппа = ?(СтруктураПолей.Группа="0",Ложь,Истина);
			КонецЕсли;
			Владелец = Неопределено;
			Если СтруктураПолей.Свойство("Владелец") Тогда
				Владелец = СтруктураПолей.Владелец;
			КонецЕсли;
			ОбъектИБ = ПолучитьСоздатьОбъектБазыДанных("Справочник",Вид,Код,Наименование,ID,СтруктураПолей,СтруктураТабличныхЧастей,ЭтоГруппа,Владелец,ГруппаСправочника);
		КонецЕсли;
		
	ИначеЕсли СтруктураПолей.ТипМетаданных = "Документ" Тогда
		// Доступные поля: Вид,Номер,Дата,ID
		
		Попытка
			ПолученныйОбъект = ПрочитанныйЭлемент.ПолучитьОбъект();
			Если ПолученныйОбъект <> Неопределено Тогда
				УстановитьПометкиУдаленияПроведения("Документ","","","",ПолученныйОбъект,СтруктураПолей);
				Возврат ПрочитанныйЭлемент;
			КонецЕсли;
		Исключение
			Возврат NULL;
		КонецПопытки;
		
		Если НЕ СтруктураПолей.Свойство("Вид") Тогда
			Возврат ОбъектИБ;
		КонецЕсли;
		Вид = СтруктураПолей.Вид;
		
		Если СтруктураПолей.Свойство("ID") Тогда
			Номер = "";
			Если СтруктураПолей.Свойство("Номер") Тогда
				Номер = СтруктураПолей.Номер;
			КонецЕсли;
			ДатаДок = Дата(1,1,1);
			Если СтруктураПолей.Свойство("Дата") Тогда
				ДатаДок = СтруктураПолей.Дата;
			КонецЕсли;
			ID = СтруктураПолей.ID;
			ОбъектИБ = ПолучитьСоздатьОбъектБазыДанных("Документ",Вид,Номер,ДатаДок,ID,СтруктураПолей,СтруктураТабличныхЧастей);
		КонецЕсли;
		
	ИначеЕсли СтруктураПолей.ТипМетаданных = "Перечисление" Тогда
		// Доступные поля: Вид
		
	КонецЕсли;
	
	Возврат ОбъектИБ;
	
КонецФункции

// Читает запись XML с учетом всех входящих атрибутов и элементов
// Возвращает элемент базы данных, соответствующий прочитанному элементу XML
// Параметры:
//  ФайлXML - открытый для чтения файл XML, спозиционированный на начале считываемого элемента
Функция ПрочитатьЭлементИзXMLФайла(ФайлXML)
	
	Перем ПрочитанныйТип, ПрочитанноеЗначение;
	
	ПрочитанныйЭлемент = Неопределено;
	ОбъектИБ = Неопределено;
	
	ИмяУзла = ФайлXML.Имя;
	ТипПрочитан = Ложь;
	ЗначениеПрочитано = Ложь;
	
	// читаем атрибуты узла
	Пока ФайлXML.ПрочитатьАтрибут() Цикл
		
		Если ФайлXML.ЛокальноеИмя = "Тип" Тогда
			ПрочитанныйТип = ИзXMLТипа(ФайлXML.Значение,ФайлXML.URIПространстваИмен);
			ТипПрочитан = Истина;
		КонецЕсли;
		Если ФайлXML.ЛокальноеИмя = "Значение" Тогда
			ПрочитанноеЗначение = ФайлXML.Значение;
			ЗначениеПрочитано = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипПрочитан И ЗначениеПрочитано Тогда
		Попытка
			ПрочитанныйЭлемент = XMLЗначение(ПрочитанныйТип,ПрочитанноеЗначение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// читаем вложенные узлы
	Пока ФайлXML.Прочитать() Цикл
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ФайлXML.Имя = ИмяУзла Тогда
			Прервать;
		КонецЕсли;
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "ОписаниеМетаданных" Тогда
			ОбъектИБ = ПолучитьСоздатьОбъектИнформационнойБазыИзXML(ФайлXML,ПрочитанныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбъектИБ) ИЛИ ОбъектИБ = NULL Тогда
		Возврат ОбъектИБ;
	КонецЕсли;
	
	Возврат ПрочитанныйЭлемент;
	
КонецФункции

Процедура ПрочитатьОчереднуюЗаписьДанных(ФайлXML,пИмяУзла)
	
	Пока ФайлXML.Прочитать() Цикл
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента И Найти(ФайлXML.Имя,пИмяУзла) > 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ОбъектСсылка = ПрочитатьЭлементИзXMLФайла(ФайлXML);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
