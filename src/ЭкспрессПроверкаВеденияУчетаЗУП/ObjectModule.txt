
///////////////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСтруктураОтчета Экспорт;
Перем мЗаголовкиПервогоУровня Экспорт;
Перем мЗаголовкиВторогоУровня Экспорт;
Перем мТаблицаРезультатаПроверки Экспорт;

Перем мУровнейЗаголовковОтчета Экспорт;

///////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
//
Функция Версия() Экспорт
	
	Возврат "1.0.2";
	
КонецФункции

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
//
Функция ТекстЗапросаПерсональныеДанныеФизлиц() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВсеРаботники
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоПериода, ) КАК РаботникиОрганизацийСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &НачалоПериода
	|				ТОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник,
	|	РаботникиОрганизаций.Сотрудник.Физлицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник,
	|	РаботникиОрганизаций.Сотрудник.Физлицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.ПериодЗавершения МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Физлицо КАК Физлицо,
	|	ФизическиеЛица.Физлицо.Наименование КАК НаименованиеФизлица,
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество,
	|	КИЮрАдрес.Поле1 КАК ЮрАдресИндекс,
	|	ВЫРАЗИТЬ(КИЮрАдрес.Представление КАК СТРОКА(100)) КАК ЮрАдрес,
	|	КИФактАдрес.Поле1 КАК ФактАдресИндекс,
	|	ВЫРАЗИТЬ(КИФактАдрес.Представление КАК СТРОКА(100)) КАК ФактАдрес,
	|	КИИнфАдрес.Поле1 КАК ИнфАдресИндекс,
	|	ВЫРАЗИТЬ(КИИнфАдрес.Представление КАК СТРОКА(100)) КАК ИнфАдрес,
	|	ФизическиеЛица.Физлицо.ИНН КАК ИНН,
	|	ФизическиеЛица.Физлицо.СтраховойНомерПФР КАК СНИЛС,
	|	ПаспортныеДанные.ДокументВид,
	|	ПаспортныеДанные.ДокументСерия,
	|	ПаспортныеДанные.ДокументНомер,
	|	ПаспортныеДанные.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанные.ДокументКемВыдан КАК СТРОКА(100)) КАК ДокументКемВыдан,
	|	ПаспортныеДанные.ДокументКодПодразделения,
	|	ПаспортныеДанные.ДатаРегистрацииПоМестуЖительства КАК ДокументДатаРегистрации,
	|	ВЫБОР
	|		КОГДА ПаспортныеДанные.ДокументВид ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДокументЗаполнен,
	|	СеверныйСтаж.Период КАК СеверныйСтажПериодЗаписи,
	|	СеверныйСтаж.ПорядокНачисленияСеверныхНадбавок КАК СеверныйСтажПорядокНачисления
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВсеРаботники.Физлицо КАК Физлицо
	|	ИЗ
	|		ВсеРаботники КАК ВсеРаботники) КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&КонецПериода,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ВсеРаботники.Физлицо
	|					ИЗ
	|						ВсеРаботники КАК ВсеРаботники)) КАК ФИОФизЛиц
	|		ПО ФизическиеЛица.Физлицо = ФИОФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КИЮрАдрес
	|		ПО ФизическиеЛица.Физлицо = КИЮрАдрес.Объект
	|			И (КИЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КИЮрАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КИФактАдрес
	|		ПО ФизическиеЛица.Физлицо = КИФактАдрес.Объект
	|			И (КИФактАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КИФактАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КИИнфАдрес
	|		ПО ФизическиеЛица.Физлицо = КИИнфАдрес.Объект
	|			И (КИИнфАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КИИнфАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ИнформАдресФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				&КонецПериода,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ВсеРаботники.Физлицо
	|					ИЗ
	|						ВсеРаботники КАК ВсеРаботники)) КАК ПаспортныеДанные
	|		ПО ФизическиеЛица.Физлицо = ПаспортныеДанные.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтажеРаботыНаСевере.СрезПоследних(
	|				&КонецПериода,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ВсеРаботники.Физлицо
	|					ИЗ
	|						ВсеРаботники КАК ВсеРаботники)) КАК СеверныйСтаж
	|		ПО ФизическиеЛица.Физлицо = СеверныйСтаж.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьРазделВСтруктуруОтчета(НомерЗаголовка1, НомерЗаголовка2)
	
	НоваяСтрока = мСтруктураОтчета.Добавить();
	НоваяСтрока.НомерЗаголовка1 = НомерЗаголовка1;
	НоваяСтрока.НомерЗаголовка2 = НомерЗаголовка2;
	
КонецПроцедуры

Процедура ИнициализацияСтруктурДанных()
	
	мСтруктураОтчета = Новый ТаблицаЗначений;
	мСтруктураОтчета.Колонки.Добавить("НомерЗаголовка1");
	мСтруктураОтчета.Колонки.Добавить("НомерЗаголовка2");
	
	мЗаголовкиПервогоУровня = Новый Соответствие;
	мЗаголовкиПервогоУровня.Вставить(1, НСтр("ru = 'Персональные данные физлиц'"));
	
	мЗаголовкиВторогоУровня = Новый Соответствие;
	мЗаголовкиВторогоУровня.Вставить(1, НСтр("ru = 'Соответствие наименования физлица значению ФИО из регистра сведений'"));
	мЗаголовкиВторогоУровня.Вставить(2, НСтр("ru = 'Полнота и корректность заполнения контактной информации'"));
	мЗаголовкиВторогоУровня.Вставить(3, НСтр("ru = 'Проверка регламентированных кодов'"));
	мЗаголовкиВторогоУровня.Вставить(4, НСтр("ru = 'Наличие и корректность заполнения паспортных данных'"));
	мЗаголовкиВторогоУровня.Вставить(5, НСтр("ru = 'Сведения о северном стаже'"));
	
	ДобавитьРазделВСтруктуруОтчета(1, 1);
	ДобавитьРазделВСтруктуруОтчета(1, 2);
	ДобавитьРазделВСтруктуруОтчета(1, 3);
	ДобавитьРазделВСтруктуруОтчета(1, 4);
	ДобавитьРазделВСтруктуруОтчета(1, 5);
	
	мТаблицаРезультатаПроверки = Новый ТаблицаЗначений;
	мТаблицаРезультатаПроверки.Колонки.Добавить("РазделОтчета1");
	мТаблицаРезультатаПроверки.Колонки.Добавить("РазделОтчета2");
	мТаблицаРезультатаПроверки.Колонки.Добавить("ФизическоеЛицо");
	мТаблицаРезультатаПроверки.Колонки.Добавить("ОписаниеОшибки");
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры
//  РазделОшибок  - Число - Номер раздела второго уровня для вывода в отчет
//                 (см. описание структуры мЗаголовкиВторогоУровня в процедуре ИнициализацияСтруктурДанных())
//  ФизическоеЛицо  - СправочникСсылка.ФизическиеЛица - физлицо, по которому найдена ошибка
//  ОписаниеОшибки  - Строка - Подробное описание ошибки, которое будет выведено в отчет для информирования пользователя
//
Процедура ДобавитьСтрокуВТаблицуРезультата(РазделОшибок, ФизическоеЛицо, ОписаниеОшибки) Экспорт
	
	СтрокаСтруктурыОтчета = мСтруктураОтчета.Найти(РазделОшибок, "НомерЗаголовка2");
	
	НоваяСтрока = мТаблицаРезультатаПроверки.Добавить();
	НоваяСтрока.РазделОтчета1 = СтрокаСтруктурыОтчета.НомерЗаголовка1;
	НоваяСтрока.РазделОтчета2 = РазделОшибок;
	НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
	НоваяСтрока.ОписаниеОшибки = ОписаниеОшибки;
	
КонецПроцедуры

Функция ПолучитьИзСтрокиТолькоЦифры(ИсходнаяСтрока) Экспорт
	
	КопияСтроки = СокрЛП(ИсходнаяСтрока);
	ДлинаСтроки = СтрДлина(КопияСтроки);
	Результат = "";
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		Симв = Сред(КопияСтроки, Сч, 1);
		Если Найти("0123456789", Симв) > 0 Тогда
			Результат = Результат + Симв;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ДАННЫХ

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
//
Функция ПроверитьПочтовыйИндекс(ПочтовыйИндекс, Длина = 6) Экспорт
	
	Если СтрДлина(ПочтовыйИндекс) <> Длина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТолькоЦифры = ПолучитьИзСтрокиТолькоЦифры(ПочтовыйИндекс);
	Если СтрДлина(ТолькоЦифры) <> Длина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет соответствие ИНН требованиям.
//
// Параметры:
//  ИНН                - Строка - Проверяемый индивидуальный номер налогоплательщика.
//  ТекстСообщения     - Строка - Текст сообщения о найденных ошибках.
//  ЭтоЮридическоеЛицо - Булево - признак, является ли владелец ИНН юридическим лицом.
//
// Возвращаемое значение:
//  Истина       - ИНН соответствует требованиям;
//  Ложь         - ИНН не соответствует требованиям.
//
Функция ИННСоответствуетТребованиям(Знач ИНН, ТекстСообщения, ЭтоЮридическоеЛицо = Ложь) Экспорт

	СоответствуетТребованиям = Истина;
	ТекстСообщения = "";

	ИНН      = СокрЛП(ИНН);
	ДлинаИНН = СтрДлина(ИНН);

	Если ЭтоЮридическоеЛицо = Неопределено Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Не определен тип владельца ИНН.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'ИНН должен состоять только из цифр.'");
	КонецЕсли;

	Если ЭтоЮридическоеЛицо И ДлинаИНН <> 10 Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
			+ НСтр("ru = 'ИНН юридического лица должен состоять из 10 цифр.'");
	ИначеЕсли НЕ ЭтоЮридическоеЛицо И ДлинаИНН <> 12 Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
			+ НСтр("ru = 'ИНН физического лица должен состоять из 12 цифр.'");
	КонецЕсли;

	Если СоответствуетТребованиям Тогда

		Если ЭтоЮридическоеЛицо Тогда

			КонтрольнаяСумма = 0;

			Для Индекс = 1 По 9 Цикл

				Если Индекс = 1 Тогда
					Множитель = 2;
				ИначеЕсли Индекс = 2 Тогда
					Множитель = 4;
				ИначеЕсли Индекс = 3 Тогда
					Множитель = 10;
				ИначеЕсли Индекс = 4 Тогда
					Множитель = 3;
				ИначеЕсли Индекс = 5 Тогда
					Множитель = 5;
				ИначеЕсли Индекс = 6 Тогда
					Множитель = 9;
				ИначеЕсли Индекс = 7 Тогда
					Множитель = 4;
				ИначеЕсли Индекс = 8 Тогда
					Множитель = 6;
				ИначеЕсли Индекс = 9 Тогда
					Множитель = 8;
				КонецЕсли;

				Цифра = Число(Сред(ИНН, Индекс, 1));
				КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;

			КонецЦикла;
			
			КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;

			Если КонтрольныйРазряд <> Число(Сред(ИНН, 10, 1)) Тогда
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Контрольное число для ИНН не совпадает с рассчитанным.'");
			КонецЕсли;

		Иначе

			КонтрольнаяСумма11 = 0;
			КонтрольнаяСумма12 = 0;

			Для Индекс = 1 По 11 Цикл

				// Расчет множителя для 11-го и 12-го разрядов.
				Если Индекс = 1 Тогда
					Множитель11 = 7;
					Множитель12 = 3;
				ИначеЕсли Индекс = 2 Тогда
					Множитель11 = 2;
					Множитель12 = 7;
				ИначеЕсли Индекс = 3 Тогда
					Множитель11 = 4;
					Множитель12 = 2;
				ИначеЕсли Индекс = 4 Тогда
					Множитель11 = 10;
					Множитель12 = 4;
				ИначеЕсли Индекс = 5 Тогда
					Множитель11 = 3;
					Множитель12 = 10;
				ИначеЕсли Индекс = 6 Тогда
					Множитель11 = 5;
					Множитель12 = 3;
				ИначеЕсли Индекс = 7 Тогда
					Множитель11 = 9;
					Множитель12 = 5;
				ИначеЕсли Индекс = 8 Тогда
					Множитель11 = 4;
					Множитель12 = 9;
				ИначеЕсли Индекс = 9 Тогда
					Множитель11 = 6;
					Множитель12 = 4;
				ИначеЕсли Индекс = 10 Тогда
					Множитель11 = 8;
					Множитель12 = 6;
				ИначеЕсли Индекс = 11 Тогда
					Множитель11 = 0;
					Множитель12 = 8;
				КонецЕсли;

				Цифра = Число(Сред(ИНН, Индекс, 1));
				КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
				КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;

			КонецЦикла;

			КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
			КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;

			Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1)) ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Контрольное число для ИНН не совпадает с рассчитанным.'");
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат СоответствуетТребованиям;

КонецФункции 

// Проверяет номер страхового свидетельства на соответствие требованиям ПФР.
//
// Параметры:
//		СтраховойНомер - страховой номер ПФР. Строка должна быть ведена по шаблону "999-999-999 99".
//		ТекстСообщения - текст сообщения об ошибке ввода страхового номера.
//
Функция СтраховойНомерПФРСоответствуетТребованиям(Знач СтраховойНомер, ТекстСообщения) Экспорт
	
	ТекстСообщения = "";
	
	СтрокаЦифр = СтрЗаменить(СтраховойНомер, "-", "");
	СтрокаЦифр = СтрЗаменить(СтрокаЦифр, " ", "");
	
	Если ПустаяСтрока(СтрокаЦифр) Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Страховой номер не заполнен'");
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(СтрокаЦифр) < 11 Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Страховой номер задан неполностью'");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаЦифр) Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Страховой номер должен состоять только из цифр.'");
		Возврат Ложь;
	КонецЕсли;
	
	КонтрольноеЧисло = Число(Прав(СтрокаЦифр, 2));
	
	Если Число(Лев(СтрокаЦифр, 9)) > 1001998 Тогда
		Всего = 0;
		Для Сч = 1 По 9 Цикл
			Всего = Всего + Число(Сред(СтрокаЦифр, 10 - Сч, 1)) * Сч;
		КонецЦикла;
		Остаток = Всего % 101;
		Остаток = ?(Остаток = 100, 0, Остаток);
		Если Остаток <> КонтрольноеЧисло Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru = 'Контрольное число для страхового номера не совпадает с рассчитанным.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
//
Функция ПроверитьПаспортныеДанные(Выборка, ПараметрыПаспорт, ТекстСообщения) Экспорт
	
	Результат = Истина;
	
	ПоляОшибка = "";
	Для Каждого КлючИЗначение Из ПараметрыПаспорт Цикл
		Если НЕ ЗначениеЗаполнено(Выборка[КлючИЗначение.Ключ]) Тогда
			ПоляОшибка = ПоляОшибка + Символы.ПС + КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ПоляОшибка) Тогда
		ТекстСообщения = НСтр("ru = 'В паспортных данных не указана информация:'") + ПоляОшибка;
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПочтовыйИндекс(Выборка.ДокументНомер) Тогда
		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС) + 
			НСтр("ru = 'Номер паспорта должен состоять из 6 цифр, и не содержать пробелов'");
		Результат = Ложь;
	КонецЕсли;
	
	// серия паспорта
	Серия = Выборка.ДокументСерия;
	ЦифрыСерии = ПолучитьИзСтрокиТолькоЦифры(Серия);
	ОшибкаВСерии = Ложь;
	Если СтрДлина(Серия) <> 5 Тогда
		ОшибкаВСерии = Истина;
	ИначеЕсли СтрДлина(ЦифрыСерии) <> 4 Тогда
		ОшибкаВСерии = Истина;
	ИначеЕсли Сред(Серия, 3, 1) <> " " Тогда
		ОшибкаВСерии = Истина;
	КонецЕсли;
	
	Если ОшибкаВСерии Тогда
		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС) + 
			НСтр("ru = 'Серия паспорта должна состоять из двух пар цифр, разделенных одним пробелом, и не содержать лишних пробелов'");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ МОДУЛЯ

ИнициализацияСтруктурДанных();
мУровнейЗаголовковОтчета = 2;
