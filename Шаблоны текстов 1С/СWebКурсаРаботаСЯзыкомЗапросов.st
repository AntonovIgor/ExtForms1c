{1,
{4,
{"Язык и использование запросов в 1С 8.*",1,0,"",""},
{2,
{"Внешняя обработка ""РазработкаЗапросов""",1,0,"",""},
{0,
{"Запрос ""Параметр отбора КоличествоДетей""",0,0,"","ВЫБРАТЬ
|	ФизЛицо,
|	Дети,
|	ЖенатЗамужем,
|	Иждивенцы
|ИЗ
|	РегистрСведений.АнкетныеДанныеФизическихЛиц
|ГДЕ
|	Дети >= &КоличествоДетей"}
},
{0,
{"Запрос ""Сумма закупок с итогами общими, по организации и поставщику с группами""",0,0,"","ВЫБРАТЬ
|	Товары.Ссылка.Организация КАК Организация,
|	Товары.Ссылка.Поставщик КАК Поставщик,
|	Товары.Ссылка.Менеджер,
|	Товары.Товар,
|	СУММА(Товары.Количество) КАК Количество,
|	СУММА(Товары.Сумма) КАК Сумма
|ИЗ
|	Документ.ПриходнаяНакладная.Товары КАК Товары
|
|СГРУППИРОВАТЬ ПО
|	Товары.Ссылка.Организация,
|	Товары.Ссылка.Поставщик,
|	Товары.Ссылка.Менеджер,
|	Товары.Товар
|ИТОГИ
|	СУММА(Сумма)
|ПО
|	ОБЩИЕ,
|	Организация,
|	Поставщик ИЕРАРХИЯ"}
}
},
{8,
{"Внешняя обработка ""Инфраструктура""",1,0,"",""},
{0,
{"ИнициализироватьТаблицуИлиДерево()",0,0,"","	ИнициализироватьТаблицуИлиДерево(РезультатЗапроса, );
"}
},
{2,
{"Получение выборки результата запроса и обход ее",1,0,"",""},
{0,
{"Запрос ""Расчет пособия на детей и иждивенцев""",0,0,"","ВЫБРАТЬ
|	ФизЛицо,
|	Дети,
|	Иждивенцы,
|	Дети * 1000 + Иждивенцы * 500 КАК ПособиеНаДетейИИждивенцев
|ИЗ
|	РегистрСведений.АнкетныеДанныеФизическихЛиц"}
},
{0,
{"Заполнение полей строки таблицы",0,0,"","		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.ФизЛицо   = Выборка.Физлицо;
		СтрокаТаблицы.Дети      = Выборка.Дети;
		СтрокаТаблицы.Иждивенцы = Выборка.Иждивенцы;
		СтрокаТаблицы.ПособиеНаДетейИИждивенцев = Выборка.ПособиеНаДетейИИждивенцев;
		"}
}
},
{2,
{"Выборка при наличии в запросе секции ИТОГИ",1,0,"",""},
{0,
{"Запрос продаж по месяцам",0,0,"","	ВЫБРАТЬ
	|	ПродажиОбороты.Период,
	|	ПродажиОбороты.Контрагент,
	|	ПродажиОбороты.Менеджер,
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.СуммаОборот
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, , Месяц, ) КАК ПродажиОбороты"}
},
{0,
{"Заполнение полей строки таблицы",0,0,"","		СтрокаТаблицы = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		СтрокаТаблицы.Группировка = Выборка.Группировка();
		СтрокаТаблицы.ТипЗаписи   = Выборка.ТипЗаписи();
		СтрокаТаблицы.Уровень     = Выборка.Уровень();
		"}
}
},
{6,
{"Получение вложенной выборки",1,0,"",""},
{0,
{"Процедура ВызовыМетодовВыборки()",0,0,"","
Процедура ВызовыМетодовВыборки(СтрокаДерева, Выборка)
	СтрокаДерева.Группировка = Выборка.Группировка();
	СтрокаДерева.ТипЗаписи   = Выборка.ТипЗаписи();
	СтрокаДерева.Уровень     = Выборка.Уровень();
КонецПроцедуры"}
},
{0,
{"Заполнение полей СтрокаИтогПоПериоду",0,0,"","		СтрокаИтогПоПериоду = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИтогПоПериоду, ВыборкаПериод);
		ВызовыМетодовВыборки(СтрокаИтогПоПериоду, ВыборкаПериод);
"}
},
{0,
{"Получение ВыборкаКонтрагент",0,0,"","		
		ВыборкаКонтрагент = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
"}
},
{0,
{"Цикл по ВыборкаКонтрагент",0,0,"","
		Пока ВыборкаКонтрагент.Следующий() Цикл
			СтрокаИтогПоКонтрагенту = СтрокаИтогПоПериоду.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИтогПоКонтрагенту, ВыборкаКонтрагент);
			ВызовыМетодовВыборки(СтрокаИтогПоКонтрагенту, ВыборкаКонтрагент);
			
		КонецЦикла;
"}
},
{0,
{"Получение ВыборкаМенеджер",0,0,"","
			ВыборкаМенеджер = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
"}
},
{0,
{"Цикл по ВыборкаМенеджер",0,0,"","
			Пока ВыборкаМенеджер.Следующий() Цикл
				СтрокаИтогПоМенеджеру = СтрокаИтогПоКонтрагенту.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаИтогПоМенеджеру, ВыборкаМенеджер);
				ВызовыМетодовВыборки(СтрокаИтогПоМенеджеру, ВыборкаМенеджер);
				
			КонецЦикла;
"}
}
},
{1,
{"Второй параметр методва Выбрать()",1,0,"",""},
{0,
{"Код",0,0,"","
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПериод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИнициализироватьТаблицуИлиДерево(РезультатЗапроса, Дерево);

	Пока ВыборкаПериод.Следующий() Цикл
		СтрокаИтогПоПериоду = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИтогПоПериоду, ВыборкаПериод);
		ВызовыМетодовВыборки(СтрокаИтогПоПериоду, ВыборкаПериод);
	КонецЦикла;"}
}
},
{2,
{"Третий параметр методва Выбрать()",1,0,"",""},
{0,
{"Создание запроса",0,0,"","	Запрос = Новый Запрос();
	Запрос.Текст = 
	"" ВЫБРАТЬ
	|	Период,
	|	Номенклатура,
	|	СуммаОборот
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, , Месяц)
	|ИТОГИ
	|	СУММА(СуммаОборот)
	|ПО
	|	Период,
	|	Номенклатура""; 
	
"}
},
{0,
{"Код",0,0,"","	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ИнициализироватьТаблицуИлиДерево(РезультатЗапроса, Дерево);
	
	ВыборкаПериод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПериод.Следующий() Цикл
		СтрокаИтогПоПериоду = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИтогПоПериоду, ВыборкаПериод);
		
		ВыборкаНоменклатура = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			СтрокаИтогПоНоменклатуре = СтрокаИтогПоПериоду.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИтогПоНоменклатуре, ВыборкаНоменклатура);
		КонецЦикла;
	КонецЦикла;
	 
"}
}
},
{4,
{"Дополнение результата запроса датами",1,0,"",""},
{0,
{"Запрос",0,0,"","ВЫБРАТЬ
|	ПродажиОбороты.Период КАК Период,
|	ПродажиОбороты.Номенклатура КАК Номенклатура,
|	ПродажиОбороты.СуммаОборот КАК СуммаОборот
|ИЗ
|	РегистрНакопления.Продажи.Обороты(&Начало, &Конец, День, ) КАК ПродажиОбороты
|
|УПОРЯДОЧИТЬ ПО
|	Период
|ИТОГИ
|	СУММА(СуммаОборот)
|ПО
|	Период,
|	Номенклатура"}
},
{0,
{"Установка параметров и выполнение запроса",0,0,"","
	Запрос.УстановитьПараметр(""Начало"", '20090101');
	Запрос.УстановитьПараметр(""Конец"", '20090131');
	
	РезультатЗапроса = Запрос.Выполнить();
	ИнициализироватьТаблицуИлиДерево(РезультатЗапроса, Дерево);
"}
},
{0,
{"Получение выборки и цикл по периоду",0,0,"","	
	ВыборкаПериод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""Период"", ""ВСЕ"");
	
	Пока ВыборкаПериод.Следующий() Цикл
		СтрокаИтогПоПериоду = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИтогПоПериоду, ВыборкаПериод);
		
	КонецЦикла;
"}
},
{0,
{"Получение выборки и цикл по номенклатуре",0,0,"","
		ВыборкаНоменклатура = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			СтрокаИтогПоНоменклатуре = СтрокаИтогПоПериоду.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИтогПоНоменклатуре, ВыборкаНоменклатура);
		КонецЦикла;
"}
}
},
{3,
{"Временные таблицы и пакетные запросы",1,0,"",""},
{7,
{"Возможный случай применения временной таблицы",1,0,"",""},
{0,
{"Создание Менеджера временных таблиц",0,0,"","	Запрос = Новый Запрос();
	ОбъектМенеджерВТ = Новый МенеджерВременныхТаблиц();
	Запрос.МенеджерВременныхТаблиц = ОбъектМенеджерВТ;
"}
},
{0,
{"Текст запроса (без временной таблицы)",0,0,"","
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Анкеты.ФизЛицо КАК ФизЛицо,
	|	Анкеты.Дети + Анкеты.Иждивенцы КАК ДетиПлюсИждивенцы
	|ИЗ
	|	РегистрСведений.АнкетныеДанныеФизическихЛиц КАК Анкеты"";
	
"}
},
{0,
{"Выполнение запроса - помещение в ВТ",0,0,"","	
	Запрос.Выполнить();

"}
},
{0,
{"Текст запроса Премия по оборотам закупок",0,0,"","
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	ОборотыЗакупок.Менеджер,
	|	ОборотыЗакупок.СуммаОборот * 0.05 * Коэффициент.ДетиПлюсИждивенцы КАК Премия
	|ИЗ
	|	РегистрНакопления.Закупки.Обороты(&Начало, &Конец) КАК ОборотыЗакупок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Коэффициент КАК Коэффициент
	|		ПО ОборотыЗакупок.Менеджер = Коэффициент.Физлицо"";
"}
},
{0,
{"Установка параметров и выполнение запроса по закупкам",0,0,"","
	Запрос.УстановитьПараметр(""Начало"", '20081001');
	Запрос.УстановитьПараметр(""Конец"", '20081231');
	
	Запрос.Выполнить().Выгрузить().ВыбратьСтроку();
"}
},
{0,
{"Текст запроса Премия по оборотам продаж",0,0,"","
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	ОборотыПродаж.Менеджер,
	|	ОборотыПродаж.СуммаОборот * 0.05 * Коэффициент.ДетиПлюсИждивенцы КАК Премия
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&Начало, &Конец, , ) КАК ОборотыПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Коэффициент КАК Коэффициент
	|		ПО ОборотыПродаж.Менеджер = Коэффициент.ФизЛицо"";
"}
},
{0,
{"Установка параметров и выполнение запроса по продажам",0,0,"","
	Запрос.УстановитьПараметр(""Начало"", '20090101');
	Запрос.УстановитьПараметр(""Конец"", '20090331');
	
	Запрос.Выполнить().Выгрузить().ВыбратьСтроку();
"}
}
},
{3,
{"Пакетные запросы",1,0,"",""},
{0,
{"Установка параметров",0,0,"","
	Запрос.УстановитьПараметр(""Начало"", '20090101');
	Запрос.УстановитьПараметр(""Конец"", '20090131');
"}
},
{0,
{"Вызов метода ВыполнитьПакет()",0,0,"","
	МассивРезультатов = Запрос.ВыполнитьПакет();
"}
},
{0,
{"Вывод результата",0,0,"","
	МассивРезультатов[1].Выгрузить().ВыбратьСтроку();
	"}
}
},
{1,
{"Источнк данных - объект",1,0,"",""},
{0,
{"Код",0,0,"","
	Область = ПолучитьОбщийМакет(""Общий"").Область(""Курсы"");
	Запрос.УстановитьПараметр(""ИсточникОбъект"", Область);
	Результат = Запрос.Выполнить();
	
	ИнициализироватьТаблицуИлиДерево(Результат, Таблица);
	Таблица = Результат.Выгрузить();
"}
}
}
}
},
{6,
{"Получение иерархии на неиерархических объектах",1,0,"",""},
{0,
{"Открытие формы выбора ВР",0,0,"","
	// задание вида расчета из формы выбора
	ВыбранныйВидРасчета = ПланыВидовРасчета.ВидыРасчета.ПолучитьФормуВыбора().ОткрытьМодально();
	Если НЕ ЗначениеЗаполнено(ВыбранныйВидРасчета) Тогда
		Возврат;
	КонецЕсли;
"}
},
{0,
{"Запрос",0,0,"","	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	ВидыРасчета.Ссылка КАК ВидРасчета,
	|	ВидыРасчетаБазовыеВидыРасчета.ВидРасчета КАК БазовыйВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ВидыРасчета КАК ВидыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ВидыРасчета.БазовыеВидыРасчета КАК ВидыРасчетаБазовыеВидыРасчета
	|		ПО ВидыРасчета.Ссылка = ВидыРасчетаБазовыеВидыРасчета.Ссылка
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ БазовыйВидРасчета)
	|ПО
	|	ВидРасчета"";

"}
},
{0,
{"Получение результата запроса",0,0,"","	
	Результат = Запрос.Выполнить();
	ИнициализироватьТаблицуИлиДерево(Результат, Дерево);
"}
},
{0,
{"Выгрузка результата в дерево",0,0,"","
	ВыгрузкаВДерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
"}
},
{0,
{"Первый вызов процедуры",0,0,"","	
	Выкрутка(ВыгрузкаВДерево, ВыбранныйВидРасчета, Дерево);
"}
},
{6,
{"Процедура Выкрутка()",1,0,"",""},
{0,
{"Тело процедуры",0,0,"","
Процедура Выкрутка(ВыгрузкаВДерево, ВидРасчета, РодительскийУровень)

КонецПроцедуры
"}
},
{0,
{"Поиск по дереву выгрузки",0,0,"","
	// поиск вида расчета в дереве выгрузки
	НайденнаяСтрокаВыгрузки = ВыгрузкаВДерево.Строки.Найти(ВидРасчета, ""ВидРасчета"", Ложь);
	
"}
},
{0,
{"Добавить новую дочернюю строку",0,0,"","	НоваяСтрока = РодительскийУровень.Строки.Добавить();
"}
},
{0,
{"Заполнение поля ВидРасчета новой строки",0,0,"","	НоваяСтрока.ВидРасчета = НайденнаяСтрокаВыгрузки.ВидРасчета;
"}
},
{0,
{"Если есть дочерние...",0,0,"","	// если есть дочерние...
	Если НайденнаяСтрокаВыгрузки.БазовыйВидРасчета > 0 Тогда

	КонецЕсли;
"}
},
{0,
{"Рекурсия",0,0,"","		// рекурсивный вызов процедуры Выкрутка() для каждой дочерней строки
		Для каждого ДочерняяСтрока из НайденнаяСтрокаВыгрузки.Строки Цикл
			Выкрутка(ВыгрузкаВДерево, ДочерняяСтрока.БазовыйВидРасчета, НоваяСтрока);
		КонецЦикла;"}
}
}
},
{1,
{"Построитель запроса",1,0,"",""},
{0,
{"Запрос  ""Остатки, Закупки, Продажи с разметкой""",0,0,"","	""ВЫБРАТЬ
	|	Товары.Ссылка КАК Товар,
	|	Остатки.КоличествоОстаток КАК Остаток,
	|	Закупки.КоличествоОборот КАК Закуплено,
	|	Продажи.КоличествоОборот КАК Продано
	|ИЗ
	|	Справочник.Номенклатура КАК Товары
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&Начало, ) КАК Остатки
	|		ПО Товары.Ссылка = Остатки.Номенклатура}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(&Начало, &Конец, , ) КАК Закупки
	|		ПО Товары.Ссылка = Закупки.Номенклатура}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&Начало, &Конец, , ) КАК Продажи
	|		ПО Товары.Ссылка = Продажи.Номенклатура}
	|ГДЕ
	|	(НЕ Товары.ЭтоГруппа)"";
"}
}
}
}
}